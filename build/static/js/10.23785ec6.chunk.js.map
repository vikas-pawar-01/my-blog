{"version":3,"sources":["shared/pages/Registration.js","shared/hooks/http-hook.js","shared/components/Modal.js"],"names":["Registration","_useHttpClient","_useState","useState","_useState2","Object","slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","url","method","body","headers","httpAbortCtrl","response","responseData","_args","arguments","wrap","_context","prev","next","length","undefined","AbortController","current","push","fetch","signal","sent","json","filter","reqCtrl","ok","Error","message","abrupt","t0","stop","_x","apply","this","useEffect","forEach","abortCtrl","abort","clearError","useHttpClient","errorMessage","setErrorMessage","successMessage","setSuccessMessage","refName","useNavigate","refEmail","refPhone","refPassword","refConfirmPassword","refCaptcha","setTimeout","loadCaptchaEnginge","success","value","handleRegistration","event","name","email","phone","password","confirmPassword","captcha","preventDefault","validateCaptcha","concat","process","JSON","stringify","Content-Type","react_default","createElement","Modal","Container","fluid","Row","className","Col","xs","lg","role","Form","onSubmit","Group","Label","htmlFor","Control","ref","id","type","placeholder","required","minLength","react_simple_captcha","Button","variant","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","props","children"],"mappings":"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","file":"static/js/10.23785ec6.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport Modal from \"../components/Modal\";\r\nimport { useHttpClient } from \"../hooks/http-hook\";\r\nimport { loadCaptchaEnginge, LoadCanvasTemplate, LoadCanvasTemplateNoReload, validateCaptcha } from 'react-simple-captcha';\r\n\r\nconst Registration = () => {\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [successMessage, setSuccessMessage] = useState();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const refName = useRef('');\r\n    const refEmail = useRef();\r\n    const refPhone = useRef();\r\n    const refPassword = useRef();\r\n    const refConfirmPassword = useRef();\r\n    const refCaptcha = useRef();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setSuccessMessage();\r\n            setErrorMessage();\r\n            clearError();\r\n        }, 10000);\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadCaptchaEnginge(6);\r\n    }, []);\r\n\r\n    const clearForm = () => {\r\n        refName.current.value = '';\r\n        refEmail.current.value = '';\r\n        refPhone.current.value = '';\r\n        refPassword.current.value = '';\r\n        refConfirmPassword.current.value = '';\r\n        refCaptcha.current.value = '';\r\n    }\r\n\r\n    const success = () => {\r\n        setSuccessMessage('User registered successfully!');\r\n        clearForm();\r\n    }\r\n\r\n    const handleRegistration = async event => {\r\n        event.preventDefault();\r\n\r\n        let name = refName.current.value;\r\n        let email = refEmail.current.value;\r\n        let phone = refPhone.current.value;\r\n        let password = refPassword.current.value;\r\n        let confirmPassword = refConfirmPassword.current.value;\r\n        let captcha = refCaptcha.current.value;\r\n\r\n        if (password !== confirmPassword) {\r\n            setErrorMessage('Password and Confirm Password should be match!');\r\n            return false;\r\n        }\r\n\r\n        if (validateCaptcha(captcha) == false) {\r\n            setErrorMessage('Captcha does not match!');\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const dataResponse = await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/api/user/registration`,\r\n                'POST',\r\n                JSON.stringify(\r\n                    {\r\n                        name: name,\r\n                        email: email,\r\n                        phone: phone,\r\n                        password: password\r\n                    }\r\n                ),\r\n                {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            );\r\n            // auth.login(dataResponse.userId, dataResponse.token);\r\n            // navigate(\"/login\");\r\n            success();\r\n        } catch (err) { }\r\n    }\r\n\r\n    return (\r\n        <Modal>\r\n            <Container fluid=\"sm\">\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col xs lg=\"6\">\r\n                        <h2>Registration Form:</h2>\r\n                        {errorMessage && <div className=\"alert alert-danger\" role=\"alert\">\r\n                            {errorMessage}\r\n                        </div>}\r\n\r\n                        {error && <div className=\"alert alert-danger\" role=\"alert\">\r\n                            {error}\r\n                        </div>}\r\n\r\n                        {successMessage && <div className=\"alert alert-success\" role=\"alert\">\r\n                            {successMessage}\r\n                        </div>}\r\n\r\n                        <Form onSubmit={handleRegistration}>\r\n                            <Form.Group className=\"mb-3\">\r\n\r\n                                <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                                <Form.Control ref={refName} id=\"name\" type=\"text\" placeholder=\"Name\" required />\r\n\r\n                                <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n                                <Form.Control ref={refEmail} type=\"email\" placeholder=\"Email\" required />\r\n\r\n                                <Form.Label htmlFor=\"phone\">Phone Number</Form.Label>\r\n                                <Form.Control ref={refPhone} type=\"text\" placeholder=\"Phone Number\" required />\r\n\r\n                                <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n                                <Form.Control minLength=\"5\" ref={refPassword} type=\"password\" placeholder=\"Password\" required />\r\n\r\n                                <Form.Label htmlFor=\"cpassword\">Confirm Password</Form.Label>\r\n                                <Form.Control ref={refConfirmPassword} id=\"cpassword\" type=\"password\" placeholder=\"Confirm Password\" required />\r\n\r\n                                <br />\r\n                                <div>\r\n                                    <LoadCanvasTemplate />\r\n                                    <Form.Control ref={refCaptcha} id=\"captcha\" placeholder=\"Enter captcha\" required />\r\n                                </div>\r\n                                <Button type=\"submit\" className=\"btn-margin-top\" variant=\"primary\">\r\n                                    Register\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Modal >\r\n    )\r\n}\r\n\r\nexport default Registration;","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setIsLoading(true);\r\n\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n        try {\r\n            const response = await fetch(\r\n                url,\r\n                {\r\n                    method,\r\n                    body,\r\n                    headers,\r\n                    signal: httpAbortCtrl.signal\r\n                }\r\n            );\r\n\r\n            const responseData = await response.json();\r\n\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                reqCtrl => reqCtrl !== httpAbortCtrl\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            setIsLoading(false);\r\n            return responseData;\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            throw err;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n        };\r\n    }, []);\r\n\r\n    return { isLoading, error, sendRequest, clearError };\r\n};\r\n","import React from 'react';\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n        <div className=\"center\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;\r\n"],"sourceRoot":""}