{"version":3,"file":"static/js/517.00173ea6.chunk.js","mappings":"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","sources":["pages/assignments/store/Counter.js","pages/assignments/context/Counter.js","pages/assignments/Recursion.js","pages/assignments/Timer.js","pages/assignments/Toggle.js","pages/assignments/Timeout.js","pages/assignments/recoil/counterState.js","pages/assignments/recoil/incrementByState.js","pages/assignments/recoil/CounterButton.js","pages/assignments/mobx/CounterMobx.js","pages/assignments/mobx/Counter.js","pages/Features.js","pages/Modal.js"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { decrement, increment, incrementByAmount } from \"./counterSlice\";\r\n\r\nconst Counter = () => {\r\n\r\n    const count = useSelector((state) => state.counter.value)\r\n    const dispatch = useDispatch()\r\n\r\n    const amount = useRef();\r\n\r\n    return (\r\n        <>\r\n            <h2>State Management Using Redux:</h2>\r\n            <Button className=\"btn-padding\" variant=\"success\" onClick={() => dispatch(increment())}>+</Button>\r\n\r\n            <span>{count}</span>\r\n\r\n            <Button className=\"btn-padding\" variant=\"danger\" onClick={() => dispatch(decrement())}>-</Button>\r\n\r\n            <Form.Control type=\"number\" ref={amount} placeholder=\"Enter amount\" />\r\n\r\n            <Button className=\"btn-margin-top\" variant=\"primary\" onClick={() => dispatch(incrementByAmount(amount.current.value))}>Add Amount</Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Counter;","\r\nimport { useContext, useRef } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport CounterContext from \"./counter-context\";\r\n\r\nconst Counter = () => {\r\n\r\n    const userCtx = useContext(CounterContext);\r\n\r\n    const amount = useRef();\r\n\r\n    return (\r\n        <>\r\n            <h2>State Management with Context</h2>\r\n            <Button className=\"btn-padding\" variant=\"success\" onClick={() => userCtx.increment()}>+</Button>\r\n\r\n            <span>{userCtx.counter}</span>\r\n\r\n            <Button className=\"btn-padding\" variant=\"danger\" onClick={() => userCtx.decrement()}>-</Button>\r\n\r\n            <Form.Control type=\"number\" ref={amount} placeholder=\"Enter amount\" />\r\n            <Button className=\"btn-margin-top\" variant=\"primary\" onClick={() => userCtx.incrementByAmount(amount.current.value)}>Add Amount</Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Counter;","const Recursion = () => {\r\n    const myObject = {\r\n        \"a\": 1,\r\n        \"b\": [2, 3],\r\n        \"age\": 10,\r\n        ol: {\r\n            a: 5,\r\n            age: 20\r\n        },\r\n        \"d\": { \"age\": 30 }\r\n    };\r\n\r\n    let total = 0;\r\n    const calculateAge = (myObj, sum) => {\r\n\r\n        for (let obj in myObj) {\r\n            if (obj === 'age') {\r\n                total += myObj['age'];\r\n            }\r\n\r\n            if (typeof myObj[obj] == 'object' && myObj[obj] != null) {\r\n                calculateAge(myObj[obj], sum);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateAge(myObject, 0);\r\n\r\n    return (\r\n        <>\r\n            <h2>Recurssive Function: Nested Age Total = {total}</h2>\r\n            <pre>{JSON.stringify(myObject, null, 2)}</pre>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Recursion;","import { useEffect, useState } from \"react\";\r\n\r\nconst Timer = () => {\r\n\r\n    const [timer, setTimer] = useState();\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const date = new Date();\r\n            const strDate = `${date.getDate()}/${date.getMonth()}/${date.getFullYear()} \r\n            ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n            setTimer(strDate);\r\n        }, 1000);\r\n\r\n        setTimeout(() => {\r\n            clearInterval(interval);\r\n        }, 1000000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <h2>Timer: {timer}</h2>\r\n    );\r\n}\r\n\r\nexport default Timer;","import { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Toggle = () => {\r\n    const [change, setChange] = useState(false);\r\n    const handleChange = () => {\r\n        setChange(!change);\r\n    }\r\n    return (\r\n        <>\r\n            <p>Toggle Text:</p>\r\n            {!change && <p>Hello World.</p>}\r\n            {change && <p>Welcome.</p>}\r\n            <Button onClick={handleChange}>Changed!</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Toggle;\r\n","import { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Timeout = () => {\r\n    const [textClass, setTextClass] = useState('black');\r\n    const [buttonClass, setButtonClass] = useState('show')\r\n\r\n    const hideButton = () => setTimeout(() => {\r\n        setButtonClass('hide');\r\n    }, 1000);\r\n\r\n    const showButton = () => setTimeout(() => {\r\n        setButtonClass('show');\r\n        setTextClass('black');\r\n    }, 3000);\r\n\r\n    const handleClick = () => {\r\n        setTextClass('red');\r\n        hideButton();\r\n        showButton();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p className={textClass}>\r\n                When you click on button, < br />\r\n                text turns red, < br />\r\n                after 1 sec, button disappears, < br />\r\n                after 3 seconds button reappaears and text turns black again\r\n            </p>\r\n\r\n            <Button className={buttonClass} onClick={handleClick}>Click!</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Timeout;\r\n","import { atom } from \"recoil\";\r\n\r\nexport const counterState = atom({\r\n    key: 'counterState',\r\n    default: 0\r\n});","import { atom } from \"recoil\";\r\n\r\nexport const incrementByState = atom({\r\n    key: 'incrementByState',\r\n    default: 1\r\n});","import { Form, Button } from \"react-bootstrap\"\r\nimport { useRecoilState } from \"recoil\";\r\nimport { counterState } from \"./counterState\";\r\nimport { incrementByState } from \"./incrementByState\";\r\n\r\nexport const CounterButton = () => {\r\n    const [numberOfClicks, setNumberOfClicks] = useRecoilState(counterState);\r\n    const [incrementBy, setIncrementBy] = useRecoilState(incrementByState);\r\n\r\n    return (\r\n        <>\r\n            <h2>State Management with Recoil</h2>\r\n            <p>You have clicked button {numberOfClicks} times.</p>\r\n            <Form.Control value={incrementBy} onChange={e => setIncrementBy(Number(e.target.value))} type=\"number\" placeholder=\"Enter number\" />\r\n            < br />\r\n            <Button onClick={() => setNumberOfClicks(numberOfClicks + incrementBy)}>Set By Number</Button>\r\n        </>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport const CounterMobx = observer(({ counter }) => {\r\n    const [incrementBy, setIncrementBy] = useState(1);\r\n\r\n    return (\r\n        <>\r\n            <h2>State Management with Mobx</h2>\r\n            <p>You have clicked button {counter.numberOfClicks} times.</p>\r\n            <Form.Control value={incrementBy} onChange={e => setIncrementBy(Number(e.target.value))} type=\"number\" placeholder=\"Enter number\" />\r\n            < br />\r\n            <Button onClick={() => counter.increment(incrementBy)}>Set By Number</Button>\r\n        </>\r\n    )\r\n});","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class Counter {\r\n    numberOfClicks = 0;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            numberOfClicks: observable,\r\n            increment: action\r\n        });\r\n    }\r\n\r\n    increment = amount => {\r\n        this.numberOfClicks += amount;\r\n    }\r\n}","import Redux from \"./assignments/store/Counter\";\r\nimport Context from \"./assignments/context/Counter\";\r\nimport Recursion from \"./assignments/Recursion\";\r\nimport Timer from \"./assignments/Timer\";\r\nimport Modal from \"./Modal\";\r\nimport Toggle from \"./assignments/Toggle\";\r\nimport Timeout from \"./assignments/Timeout\";\r\nimport { CounterButton } from \"./assignments/recoil/CounterButton\";\r\nimport { CounterMobx } from \"./assignments/mobx/CounterMobx\";\r\nimport { Counter } from \"./assignments/mobx/Counter\";\r\n\r\nconst counter = new Counter();\r\n\r\nconst Features = () => {\r\n    return (\r\n        <Modal>\r\n            <Timer />\r\n            <hr />\r\n            <Redux />\r\n            <hr />\r\n            <Context />\r\n            <hr />\r\n            <CounterButton />\r\n            <hr />\r\n            <CounterMobx counter={counter} />\r\n            <hr />\r\n            <Recursion />\r\n            <hr />\r\n            <Toggle />\r\n            <hr />\r\n            <Timeout />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Features;","const Modal = (props) => {\r\n    return (\r\n        <div className=\"center\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;\r\n"],"names":["count","useSelector","state","counter","value","dispatch","useDispatch","amount","useRef","Button","className","variant","onClick","increment","decrement","Form","type","ref","placeholder","incrementByAmount","current","userCtx","useContext","CounterContext","myObject","ol","a","age","total","calculateAge","myObj","sum","obj","JSON","stringify","useState","timer","setTimer","useEffect","interval","setInterval","date","Date","strDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","setTimeout","clearInterval","change","setChange","textClass","setTextClass","buttonClass","setButtonClass","counterState","atom","key","default","incrementByState","CounterButton","useRecoilState","numberOfClicks","setNumberOfClicks","incrementBy","setIncrementBy","onChange","e","Number","target","CounterMobx","observer","Counter","makeObservable","this","observable","action","Modal","props","children"],"sourceRoot":""}